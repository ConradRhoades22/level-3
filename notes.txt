 JavaScript Conventions

 casing - camelCased

var myLocationIsInUtah = true

 white space

for(var i = 0; i < 10; i++){
    
}

 naming

var fName = "nate"
var lName = "jensen"

var friends = []
var isDone = true
var isGameOver = false

function sum(num1, num2){
    
}


 bracket pair colorizor
 braces
var person = {
    address: {
       street: "123 street" 
    }
}

 tab (indenting)
if(2 === 2){
    console.log("they are equal")
    if(3 === 3){
        console.log("They are equal")    
    }
}


 HTML tags
     <div> 

 comments
/*
    anything in between these are commented out
*/


 unix casing
     silly cia - no
     Silly Cia - no 
     silly_cia - yes



     
     querySelector
 Select a single element from the page. (Returns the first element it finds that matches the query)
 var result = document.querySelector("ol#favorite-things > li")
 console.log(result)


 querySelectorAll
 Select all elements from the page that match the query.
var result = document.querySelectorAll("ol#favorite-things > li")
console.log(Array.from(result))

for (var i = 0; i< result.length; i++) {
    
result[i].textContent = "** REDACTED **"
}

Selecting an element doesnâ€™t give us a whole lot of power as developers until we can make changes to the selected elements!

One of the most basic things to change about an element could be its text. (Keep in mind, this is only useful for elements that normally contain text, like paragraphs, headers, list items, etc.)

After selecting the element, you have a few options:
    1. innerHTML - can be a security risk, so it's usually best to avoid this
    2. innerText - can be "expensive" (AKA slow)
    3. textContent - best option for changing the text of an element
    
textContent is a DOM object property, which means we can set it equal to something else using the single equal sign (assignment operator).

E.g. if you had a regular JavaScript object:

    var person = {name: "Joe"}

You could change the name property by doing:

    person.name = "Jim"

You can do the same thing with DOM objects:

    var person = document.getElementById("person")
    person.textContent = "Jim"

-OR- if you combined those into one line and didn't save the variable, it looks like this:

    document.getElementById("person").textContent = "Jim"




Selecting element(s)

`document.getElementById(<id string>)` - Returns a single element by its ID. If you (erroneously) have two elements with the same id, it will pick the first one it finds

`document.querySelector(<CSS selector string>)` - Returns a single element based on the CSS selector provided as a string. If multiple items match the CSS selector, this will only return the first one that matches.

`document.getElementsByClassName(<class name string>)` - Returns an array-like HTML collection of all elements that have the provided class name. If 0 elements match, returns an empty HTML collection (like an empty array). If 1 element matches, returns an HTML collection with a single item in it (like an array with only 1 item).

`document.getElementsByTagName(<tag name string>)` - Returns a collection of elements (array-like) with the provided tag name (e.g. "h1", "div", "li", etc.)

`document.querySelectorAll(<CSS selector string>)` - Returns a collection of elements (array-like) that match the CSS selector.

-------------------

# Modifying elements

(For descriptions below, imagine we've selected and saved an element to a variable called `element`)

`element.textContent` - the plain text inside the element. Can be set equal to something new with the assignment operator (`=`)

`element.innerHTML` - the string version of the HTML elements that are children of the selected element. If you add new HTML tags to the `innerHTML` of an element, they'll be turned into new elements on the page.

`element.style` - an object whose properties match all available CSS properties of the element, but camelCased instead of separated with dashes. (E.g. `backgroundColor` instead of `background-color`)

-------------------

*Pro tip:* many attributes in the HTML of an element are accessible with JavaScript. E.g., an image element with a `src` attribute (<img id="logo" src="someImage.jpg" />) can be accessed or modified from the selected element in JS:

```
var myImage = document.getElementById("logo")
myImage.src = "newImage.jpg"
```

Same goes for `href`, `id`, etc.

// for (/*1. initialize vairables, 2. condition - should I run one more time?, 3. final code that we want to run at the end of the loop*/) {
//     ...
// }